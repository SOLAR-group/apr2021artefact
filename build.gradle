// To create fat (uber) jar
plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'application'
sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "gin.LocalSearch"

repositories {
    mavenCentral()
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

dependencies {

    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'
    compile group: 'junit', name: 'junit', version: '4.13'
    compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile group: 'com.github.javaparser', name: 'javaparser-core', version: '3.6.25'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    compile group: 'org.apache.commons', name: 'commons-rng-simple', version: '1.3'
    compile group: 'org.apache.commons', name: 'commons-rng-core', version: '1.3'
    compile group: 'org.apache.commons', name: 'commons-rng-client-api', version: '1.3'
    compile group: 'org.apache.commons', name: 'commons-rng-sampling', version: '1.3'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'


    compile group: 'com.opencsv', name: 'opencsv', version: '4.6'

    // https://mvnrepository.com/artifact/com.github.spullara.cli-parser/cli-parser
    compile group: 'com.github.spullara.cli-parser', name: 'cli-parser', version: '1.1.5'

    // https://mvnrepository.com/artifact/org.tinylog/tinylog
    compile group: 'org.tinylog', name: 'tinylog', version: '1.3.6'

    // Include the jar by "mvn package" on the fork of InMemoryCompiler created for gin.
    // This is a substitute for the following:
    // compile "org.mdkt.compiler:InMemoryJavaCompiler:1.3.0"
    // ... because InMemoryJavaCompiler has yet to incorporate the critical bugfix
    // ... and we then forked a second time to provide access to bytes of compiled code.
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Used to profile maven projects
    compile group: 'org.apache.maven.shared', name: 'maven-invoker', version: '3.0.1'

    compile group: 'org.apache.maven', name: 'maven-core', version: '3.6.3'

    // Used to profile gradle projects
    compile group: 'org.gradle', name: 'gradle-tooling-api', version: '4.10.2'
    runtime 'org.slf4j:slf4j-simple:1.8.0-beta4'

    // Create jars for call graph generation using zta-zip
    compile 'org.zeroturnaround:zt-zip:1.14'

    // Parse commandline
    compile group: 'org.zeroturnaround', name: 'zt-exec', version: '1.11'

    // Parse build reports using jsoup
    compile 'org.jsoup:jsoup:1.12.2'

    // build example project so main project unit tests (e.g. profiler) will pass!
    compile project(':gradle-simple')

    // project lombock
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

}

// This is handy to copy dependencies into a folder, for use in an IDE etc.
task copyToLib(type: Copy) {
    into "lib"
    from configurations.runtime
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

apply plugin: 'application'

mainClassName = 'gin.LocalSearch'

shadowJar {
    destinationDir = buildDir
    baseName = 'gin'
    classifier = null
    version = null
}

test {
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        //showStandardStreams = true
    }
}

// move files generated by patch analyzer to a directory
task copyPatchAnalysis(type: Copy) {
    from "quixbugs/faulty_programs"
    include "**/*.patched"
    include "**/*.blocks"
    include "**/*.statements"
    into "quixbugs/patch_analysis"
}

task cleanPatchAnalysisFromSrc(type: Delete) {
    delete fileTree("quixbugs/faulty_programs").matching {
        include "**/*.patched"
        include "**/*.blocks"
        include "**/*.statements"
    }
}

task cleanAllPatchAnalysis(type: Delete) {
    delete fileTree(rootDir).matching {
        include "**/*.patched"
        include "**/*.blocks"
        include "**/*.statements"
        include "sampler_results.csv"
        include "results/*"
    }
}
